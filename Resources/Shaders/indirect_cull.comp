#version 450

layout (local_size_x = 256) in;

struct ObjectData{
	mat4 model;
};

struct DrawCommand
{
	uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
	uint batchID;
	uint dataID;
};

struct GPUInstance {
	uint batchID;
	uint dataID;
};

layout (set = 0, binding = 0) uniform CullingGlobalData {
	uint nbInstances;
} globalData;


layout (set = 0, binding = 1) uniform CameraData {
    mat4 view;
    mat4 proj;
	mat4 viewproj;
} camera;

layout (std140, set = 0, binding = 2) readonly buffer ObjectBuffer{
	ObjectData objects[];
} objectBuffer;

layout (set = 0, binding = 3)  buffer DrawBuffer {
	DrawCommand drawsCommands[];
} drawBuffer;

layout (set = 0, binding = 4) readonly buffer InstanceBuffer {
	GPUInstance gpuInstances[];
} instanceBuffer;

layout (set = 0, binding = 5) buffer IndexMap {
	uint map[];
} objectDataIndices;

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if (gID < globalData.nbInstances) {
		uint batchIndex = instanceBuffer.gpuInstances[gID].batchID;
		uint dataIndex = instanceBuffer.gpuInstances[gID].dataID;
		if (true) {
			uint count = atomicAdd(drawBuffer.drawsCommands[batchIndex].instanceCount, 1);
			
			uint instanceIndex = drawBuffer.drawsCommands[batchIndex].firstInstance + count;
			objectDataIndices.map[instanceIndex] = dataIndex;
		}
	}
}
