#version 460

layout (local_size_x = 256) in;

struct ObjectData{
	mat4 model;
	vec4 sphereBounds;
};

struct IndirectDrawCommand
{
	uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
};

struct GPUInstance {
	uint batchID;
	uint dataID;
};

layout (std140, set = 0, binding = 0) uniform CullingGlobalData {
	mat4 view;
	vec4 frustum[6];  // Left/right/top/bottom frustum planes
	float zNear;
	float zFar;
	float P00;
	float P11;
	int pyramidWidth;
	int pyramidHeight;
	uint nbInstances;
	bool cullingEnabled;
} globalData;


layout (std140, set = 0, binding = 1) uniform CameraData {
    mat4 view;
    mat4 proj;
	mat4 viewproj;
	mat4 invProj;
} camera;

layout (std430, set = 0, binding = 2) readonly buffer ObjectBuffer{
	ObjectData objects[];
} objectBuffer;

layout (std430, set = 0, binding = 3)  buffer IndirectDrawCommandBuffer {
	IndirectDrawCommand drawsCommands[];
} indirectIndirectDrawCommandBuffer;

layout (std430, set = 0, binding = 4) readonly buffer InstanceBuffer {
	GPUInstance gpuInstances[];
} instanceBuffer;

layout (std430, set = 0, binding = 5) buffer IndexMap {
	uint map[];
} objectDataIndices;

layout(set = 0, binding = 6) uniform sampler2D depthPyramid;

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool projectSphere(vec3 C, float r, out vec4 aabb)
{
	C.y *= -1;  // convention used by the function
	float znear = globalData.zNear;
	float P00 = globalData.P00;
	float P11 = globalData.P11;

	if (C.z - r < znear)
		return false;

	vec2 cx = -C.xz;
	vec2 vx = vec2(sqrt(dot(cx, cx) - r * r), r);
	vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
	vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

	vec2 cy = -C.yz;
	vec2 vy = vec2(sqrt(dot(cy, cy) - r * r), r);
	vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
	vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

	aabb = vec4(minx.x / minx.y * P00, miny.x / miny.y * P11, maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
	aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

	return true;
}

bool IsVisible(uint objectDataIndex)
{
	vec4 sphereBounds = objectBuffer.objects[objectDataIndex].sphereBounds;
	vec3 center = (camera.view * vec4(sphereBounds.xyz, 1.f)).xyz;
	center.z *= -1;  // z is negative in view space.
	float radius = sphereBounds.w;

	bool visible = true;
	
	for (int i = 0; i < 6; ++i) {
		visible = visible && (dot(globalData.frustum[i].xyz, center) < radius);
	}
	
	visible = visible && center.z + radius > globalData.zNear && center.z - radius < globalData.zFar;
	
	vec4 aabb;
	if (projectSphere(center, radius, aabb))
	{
		float width = (aabb.z - aabb.x) * globalData.pyramidWidth;
		float height = (aabb.w - aabb.y) * globalData.pyramidHeight;

		float level = max(floor(log2(max(width, height))) - 1, 0);
		
		float zNear = globalData.zNear;
		float zFar = globalData.zFar;
		
		vec2 uv = (aabb.xy + aabb.zw) * 0.5;

		float depth = textureLod(depthPyramid, uv, level).x;

		float depthSphere = ((center.z - radius) - zNear) / (zFar - zNear);
		center.z *= -1;
		vec4 projectedSphere = camera.proj * (vec4(center, 1.0) + vec4(0, 0, radius, 0));
		projectedSphere /= projectedSphere.w;
		depthSphere = projectedSphere.z;

		visible = visible && depthSphere <= depth;
	}
	
	return visible;
}


void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if (gID < globalData.nbInstances) {
		uint batchIndex = instanceBuffer.gpuInstances[gID].batchID;
		uint dataIndex = instanceBuffer.gpuInstances[gID].dataID;
		if (IsVisible(dataIndex)) {
			uint count = atomicAdd(indirectIndirectDrawCommandBuffer.drawsCommands[batchIndex].instanceCount, 1);
			
			uint instanceIndex = indirectIndirectDrawCommandBuffer.drawsCommands[batchIndex].firstInstance + count;
			objectDataIndices.map[instanceIndex] = dataIndex;
		}
	}
}
