#version 450


layout (local_size_x = 256) in;

layout(set = 0, binding = 3) uniform transforms {   
    mat4 view;
    mat4 proj;
	mat4 viewproj;
} cameraData;

struct DrawCommand
{
	uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
	uint objectID;
	uint batchID;
};

//draw indirect buffer
layout(set = 0, binding = 1)  buffer InstanceBuffer{   
	DrawCommand Draws[];
} drawBuffer;

struct GPUInstance {
	uint objectID;
	uint batchID;
};

//draw indirect buffer
layout(set = 0, binding = 2) readonly buffer InstanceBuffer2{   
	GPUInstance Instances[];
} compactInstanceBuffer;

void main() 
{		
	uint gID = gl_GlobalInvocationID.x;
	if(gID < cullData.drawCount)
	{
		uint objectID = compactInstanceBuffer.Instances[gID].objectID;
		bool visible = false;
		if(cullData.AABBcheck == 0)
		{
			visible = IsVisible(objectID);
		}
		else{
			visible = IsVisibleAABB(objectID);
		}
		
		if(visible)
		{
			uint batchIndex = compactInstanceBuffer.Instances[gID].batchID;
			uint countIndex = atomicAdd(drawBuffer.Draws[batchIndex].instanceCount,1);

			uint instanceIndex = drawBuffer.Draws[batchIndex].firstInstance + countIndex;

			finalInstanceBuffer.IDs[instanceIndex] = objectID;
		}
	}
}
